datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  String        @id @default(uuid())
  username            String        @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
}

model Image {
  id               String        @id @default(uuid())
  path             String        @unique
  dateTaken        DateTime      @default(now())
  rating           Int           @default(0)
  metadata         Json          @default("{}")
  tagsOnImages     TagsOnImage[]
  personsOnImage   PersonsOnImage[]
}

model TagCategory {
  id            String            @id @default(uuid())
  name          String            @unique
  tags          Tag[]
  type          TagCategoryType?  @unique
}

model Tag {
  id               String        @id @default(uuid())
  name             String
  tagCategoryId    String
  tagCategory      TagCategory   @relation(fields: [tagCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagsOnImages     TagsOnImage[]
  meta             Json          @default("{}")

  @@unique([name, tagCategoryId])
}

model TagsOnImage {
  id            String        @id @default(uuid())
  tagId         String
  tag           Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image         @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tagId, imageId])
}

enum TagCategoryType {
  PERSON
}

model Person {
  id               String        @id @default(uuid())
  name             String
  personsOnImage   PersonsOnImage[]
}


model PersonsOnImage {
  id            String        @id @default(uuid())
  personId      String
  person        Person        @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId       String
  image         Image         @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([personId, imageId])
}


